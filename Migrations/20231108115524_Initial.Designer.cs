// <auto-generated />
using System;
using DF_EvolutionAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DF_EvolutionAPI.Migrations
{
    [DbContext(typeof(DFEvolutionDBContext))]
    [Migration("20231108115524_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("pa")
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DF_EvolutionAPI.Models.AppraisalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreateBy")
                        .HasColumnType("int")
                        .HasColumnName("CreateBy");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<int>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("IsActive");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("LastAppraisal")
                        .HasColumnType("int")
                        .HasColumnName("LastAppraisal");

                    b.Property<DateTime>("LastAppraisalDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAppraisalDate");

                    b.Property<int>("Percentage")
                        .HasColumnType("int")
                        .HasColumnName("Percentage");

                    b.Property<int>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("UpdateBy");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("AppraisalHistory", "pa");
                });

            modelBuilder.Entity("DF_EvolutionAPI.Models.BusinessUnit", b =>
                {
                    b.Property<int>("BusinessUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusinessUnitId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessUnitId"), 1L, 1);

                    b.Property<string>("BusinessUnitName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BusinessUnitName");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreateBy");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint")
                        .HasColumnName("IsActive");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdateBy");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.HasKey("BusinessUnitId");

                    b.ToTable("BusinessUnits", "pa");
                });

            modelBuilder.Entity("DF_EvolutionAPI.Models.Client", b =>
                {
                    b.Property<int?>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ClientId"), 1L, 1);

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ActualEndDate");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ActualStartDate");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<string>("AgreementDuration")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AgreementSignedByClient");

                    b.Property<string>("AgreementSignedByClient")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AgreementSignedByClient");

                    b.Property<string>("AgreementSignedByDF")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AgreementSignedByDF");

                    b.Property<DateTime?>("AgreementSignedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("AgreementValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("AgreementValue");

                    b.Property<int?>("ApproxNoOfPeople")
                        .HasColumnType("int")
                        .HasColumnName("ApproxNoOfPeople");

                    b.Property<decimal?>("ApproxRevenue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ApproxRevenue");

                    b.Property<DateTime?>("ApproxStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BDEId")
                        .HasColumnType("int")
                        .HasColumnName("BDEId");

                    b.Property<int?>("BusinessUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<string>("ClientCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClientCode");

                    b.Property<string>("ClientCodeReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClientCodeReference");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClientName");

                    b.Property<string>("CompanyFoundedIn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyFoundedIn");

                    b.Property<int?>("CompanyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyTypeId");

                    b.Property<string>("CompanyURL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyURL");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactNumber");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CountryId");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreateBy");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyId");

                    b.Property<int?>("DeliveryManagerId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryManagerId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int?>("DomainId")
                        .HasColumnType("int")
                        .HasColumnName("DomainId");

                    b.Property<string>("EmailId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailId");

                    b.Property<decimal?>("HourlyBillingRate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("HourlyBillingRate");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint")
                        .HasColumnName("IsActive");

                    b.Property<decimal?>("MonthlyBillingRate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("MonthlyBillingRate");

                    b.Property<int?>("NoOfYearsInBusiness")
                        .HasColumnType("int")
                        .HasColumnName("NoOfYearsInBusiness");

                    b.Property<int?>("PaymentCycleId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentCycleId");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("PracticeId")
                        .HasColumnType("int")
                        .HasColumnName("PracticeId");

                    b.Property<int?>("PrimaryTechnologyId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryTechnologyId");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonId");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateId");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdateBy");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<decimal?>("WeeklyBillingRate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("HourlyBillingRate");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Zip");

                    b.HasKey("ClientId");

                    b.ToTable("Clients", "pa");
                });

            modelBuilder.Entity("DF_EvolutionAPI.Models.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreateBy")
                        .HasColumnType("int")
                        .HasColumnName("CreateBy");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int")
                        .HasColumnName("DesignationId");

                    b.Property<string>("DesignationName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DesignationName");

                    b.Property<int?>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("IsActive");

                    b.Property<int>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("UpdateBy");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Designations", "pa");
                });

            modelBuilder.Entity("DF_EvolutionAPI.Models.KRALibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApprovedBy")
                        .HasColumnType("int")
                        .HasColumnName("ApprovedBy");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int")
                        .HasColumnName("CreateBy");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DisplayName");

                    b.Property<int>("Entity")
                        .HasColumnType("int")
                        .HasColumnName("Entity");

                    b.Property<int>("Entity2")
                        .HasColumnType("int")
                        .HasColumnName("Entity2");

                    b.Property<int>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("IsActive");

                    b.Property<int>("IsDefault")
                        .HasColumnType("int")
                        .HasColumnName("IsDefault");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("IsSpecial")
                        .HasColumnType("int")
                        .HasColumnName("IsSpecial");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reason");

                    b.Property<int>("RejectedBy")
                        .HasColumnType("int")
                        .HasColumnName("RejectedBy");

                    b.Property<int>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("UpdateBy");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<int>("Weightage")
                        .HasColumnType("int")
                        .HasColumnName("Weightage");

                    b.Property<int>("WeightageId")
                        .HasColumnType("int")
                        .HasColumnName("WeightageId");

                    b.HasKey("Id");

                    b.ToTable("KRALibrary", "pa");
                });

            modelBuilder.Entity("DF_EvolutionAPI.Models.KRAWeightage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreateBy")
                        .HasColumnType("int")
                        .HasColumnName("CreateBy");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DisplayName");

                    b.Property<int>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("IsActive");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("UpdateBy");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("KRAWeightage", "pa");
                });

            modelBuilder.Entity("DF_EvolutionAPI.Models.Project", b =>
                {
                    b.Property<int?>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ProjectId"), 1L, 1);

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ActualEndDate");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ActualStartDate");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Duration");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<decimal?>("HourlyBillingRate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("HourlyBillingRate");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("MonthlyBillingRate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("MonthlyBillingRate");

                    b.Property<int?>("NumberOfResorces")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfResorces");

                    b.Property<int?>("ProjectLeadId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectLeadId");

                    b.Property<int?>("ProjectManagerId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectManagerId");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProjectName");

                    b.Property<int?>("ProjectStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectStatusId");

                    b.Property<int?>("ProjectSubTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectSubTypeId");

                    b.Property<int?>("ProjectTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectTypeId");

                    b.Property<int?>("ReviewCycleId")
                        .HasColumnType("int")
                        .HasColumnName("ReviewCycleId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<decimal?>("WeeklyBillingRate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("WeeklyBillingRate");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects", "pa");
                });

            modelBuilder.Entity("DF_EvolutionAPI.Models.ProjectResource", b =>
                {
                    b.Property<int>("ProjectResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectResourceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectResourceId"), 1L, 1);

                    b.Property<bool>("Billable")
                        .HasColumnType("bit")
                        .HasColumnName("Billable");

                    b.Property<int?>("BillingCycleId")
                        .HasColumnType("int")
                        .HasColumnName("BillingCycleId");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreateBy");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint")
                        .HasColumnName("IsActive");

                    b.Property<int?>("PercentageAllocation")
                        .HasColumnType("int")
                        .HasColumnName("PercentageAllocation");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectId");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remark");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int")
                        .HasColumnName("ResourceId");

                    b.Property<string>("ResourceRole")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ResourceRole");

                    b.Property<bool>("Shadow")
                        .HasColumnType("bit")
                        .HasColumnName("Shadow");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdateBy");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.HasKey("ProjectResourceId");

                    b.ToTable("ProjectResources", "pa");
                });

            modelBuilder.Entity("DF_EvolutionAPI.Models.QuarterDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreateBy")
                        .HasColumnType("int")
                        .HasColumnName("CreateBy");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("IsActive");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("QuarterName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QuarterName");

                    b.Property<int?>("QuarterYear")
                        .HasColumnType("int")
                        .HasColumnName("QuarterYear");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId");

                    b.Property<int>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("UpdateBy");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("QuarterDetails", "pa");
                });

            modelBuilder.Entity("DF_EvolutionAPI.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ResourceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<string>("AlternetNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AlternetNumber");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactNumber");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CountryId");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreateBy");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfBirth");

                    b.Property<DateTime?>("DateOfJoin")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfJoin");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int")
                        .HasColumnName("DesignationId");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailId");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmployeeId");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint")
                        .HasColumnName("IsActive");

                    b.Property<string>("Primaryskill")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PrimarySkill");

                    b.Property<int?>("ReportingTo")
                        .HasColumnType("int")
                        .HasColumnName("ReportingTo");

                    b.Property<string>("ResourceName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ResourceName");

                    b.Property<string>("Secondaryskill")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SecondarySkill");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateId");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId");

                    b.Property<string>("Strengths")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Strengths");

                    b.Property<int?>("TechCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("TechCategoryId");

                    b.Property<double?>("TenureInMonths")
                        .HasColumnType("float")
                        .HasColumnName("TenureInMonths");

                    b.Property<double?>("TenureInYears")
                        .HasColumnType("float")
                        .HasColumnName("TenureInYears");

                    b.Property<double?>("TotalYears")
                        .HasColumnType("float")
                        .HasColumnName("TotalYears");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdateBy");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<int?>("YearBucket")
                        .HasColumnType("int")
                        .HasColumnName("YearBucket");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Zip");

                    b.HasKey("ResourceId");

                    b.ToTable("Resources", "pa");
                });

            modelBuilder.Entity("DF_EvolutionAPI.Models.RoleMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreateBy")
                        .HasColumnType("int")
                        .HasColumnName("CreateBy");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<int>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("IsActive");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleId");

                    b.Property<int>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("UpdateBy");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("RoleMappings", "pa");
                });

            modelBuilder.Entity("DF_EvolutionAPI.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreateBy")
                        .HasColumnType("int")
                        .HasColumnName("CreateBy");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("IsActive");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RoleName");

                    b.Property<int>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("UpdateBy");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Roles", "pa");
                });

            modelBuilder.Entity("DF_EvolutionAPI.Models.StatusLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreateBy")
                        .HasColumnType("int")
                        .HasColumnName("CreateBy");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("IsActive");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusName");

                    b.Property<string>("StatusType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StatusType");

                    b.Property<int>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("UpdateBy");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("StatusLibrary", "pa");
                });

            modelBuilder.Entity("DF_EvolutionAPI.Models.SubmissionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreateBy")
                        .HasColumnType("int")
                        .HasColumnName("CreateBy");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("IsActive");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId");

                    b.Property<string>("SubmissionName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SubmissionName");

                    b.Property<int>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("UpdateBy");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("SubmissionStatus", "pa");
                });

            modelBuilder.Entity("DF_EvolutionAPI.Models.UserApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppraisalRange")
                        .HasColumnType("int")
                        .HasColumnName("AppraisalRange");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int")
                        .HasColumnName("ApprovalStatus");

                    b.Property<int>("ApprovedBy")
                        .HasColumnType("int")
                        .HasColumnName("ApprovedBy");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int")
                        .HasColumnName("CreateBy");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<int>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("IsActive");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("KRAId")
                        .HasColumnType("int")
                        .HasColumnName("KraId");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reason");

                    b.Property<int>("RejectedBy")
                        .HasColumnType("int")
                        .HasColumnName("RejectedBy");

                    b.Property<int>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("UpdateBy");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserApproval", "pa");
                });

            modelBuilder.Entity("DF_EvolutionAPI.Models.UserKRA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppraisalRange")
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int")
                        .HasColumnName("CreateBy");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("DeveloperComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DeveloperComment");

                    b.Property<int?>("DeveloperRating")
                        .HasColumnType("int")
                        .HasColumnName("DeveloperRating");

                    b.Property<string>("FinalComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinalRating")
                        .HasColumnType("int")
                        .HasColumnName("FinalRating");

                    b.Property<int>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("IsActive");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("KRAId")
                        .HasColumnType("int")
                        .HasColumnName("KraId");

                    b.Property<string>("ManagerComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ManagerComment");

                    b.Property<int?>("ManagerRating")
                        .HasColumnType("int")
                        .HasColumnName("ManagerRating");

                    b.Property<int?>("QuarterId")
                        .HasColumnType("int")
                        .HasColumnName("QuarterId");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RejectedBy")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float")
                        .HasColumnName("Score");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("UpdateBy");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserKRAs", "pa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "pa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "pa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "pa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "pa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "pa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "pa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "pa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
